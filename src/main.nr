use dep::biguint::BigUint56;

fn decrypt_rsa_2048<T>(
    sig: BigUint56,
    pubkey: BigUint56,
    final_e: BigUint56,
    sig_quotient: BigUint56
    ) -> [u8; T] {

    // To decrypt: (sig*final_e)-(pubkey*quotient)
    let dividend = sig.mul(final_e).0;
    let mul_result = pubkey.mul(sig_quotient).0;
    let sig_decrypted = dividend.sub(mul_result);
    let sig_decrypted_bytes: [u8; T] = sig_decrypted.to_bytes_first_x();

    dep::std::println("decrypted_bytes:");
    dep::std::println(sig_decrypted_bytes);

    sig_decrypted_bytes
}

fn main(
    sig: [u8; 256],
    pubkey: [u8; 256],
    final_e: [u8; 256],
    quotient: [u8; 256],
    expected: [u8; 49]
    ) {

    let sig_biguint = BigUint56::from_bytes_256(sig);
    let pubkey_biguint = BigUint56::from_bytes_256(pubkey);
    let final_e_biguint = BigUint56::from_bytes_256(final_e);
    let quotient_biguint = BigUint56::from_bytes_256(quotient);

    let decrypted = decrypt_rsa_2048(sig_biguint, pubkey_biguint, final_e_biguint, quotient_biguint);
    assert(decrypted == expected);
}

#[test]
fn test_main() {
    let sig_bytes: [u8; 256] = [
        0x4b,0xde,0x6c,0x2e,0x8a,0x95,0xdf,0xae,0xc3,0x02,0xbb,0x90,0x41,0x4f,0xfb,0xb4,
        0x77,0xc7,0x25,0xfb,0x65,0x62,0xf9,0x7e,0xc4,0x52,0xcb,0xae,0x3d,0xbe,0x1f,0xac,
        0x73,0x98,0x6b,0x69,0x29,0x15,0x4a,0x7c,0x3f,0x2f,0x65,0x77,0xf6,0x46,0x6a,0x34,
        0x00,0x68,0x99,0xed,0x92,0xe2,0x01,0xd3,0xc3,0x6e,0x76,0x32,0x1c,0xc2,0x6c,0x5d,
        0xc4,0x18,0x8d,0x51,0x61,0xea,0x07,0xcc,0xd2,0x33,0x1e,0x77,0xe7,0x85,0x5d,0x72,
        0xde,0x7c,0x45,0x5d,0xdc,0xe4,0x40,0xdd,0x31,0x31,0x07,0xd8,0x12,0xbe,0xd1,0xd0,
        0x56,0x99,0x52,0x6d,0x32,0xc9,0x77,0xef,0x91,0x61,0xab,0x99,0xa9,0x3d,0x0b,0x16,
        0x54,0x77,0x40,0x8c,0x1e,0x89,0xf4,0x88,0xfa,0x48,0x6a,0x24,0xb4,0xe0,0x67,0x03,
        0xbf,0xf9,0xcd,0x8a,0x45,0x5d,0x0b,0x74,0xb2,0xa9,0x9a,0x3b,0x50,0xca,0xc1,0xc0,
        0xd2,0x43,0x5c,0x48,0xad,0x5b,0x1e,0xb6,0x38,0x92,0x58,0x2e,0xfd,0x06,0x7f,0x83,
        0x5e,0xf4,0xfc,0x4e,0x61,0xd2,0xbe,0x9d,0x5f,0xa9,0x4e,0x6e,0x57,0x62,0xf5,0x19,
        0x3d,0xe7,0x51,0x8a,0x45,0x09,0xbb,0xf9,0x11,0x57,0xdf,0x7e,0x6b,0x04,0x5c,0xaf,
        0x87,0x84,0x2e,0x3a,0x23,0x6d,0xb9,0x35,0x51,0xfe,0xfe,0xcc,0xa3,0x0f,0x57,0x91,
        0x04,0x2b,0x85,0x65,0x56,0xd9,0x70,0xf9,0x85,0xa3,0x47,0xcf,0xd2,0xd9,0x46,0x08,
        0x9f,0xac,0x89,0x04,0x40,0x01,0x32,0xb3,0x93,0x43,0xe5,0xca,0x7c,0x40,0xb6,0xc9,
        0xc0,0xb1,0xc0,0x64,0x90,0xdd,0x4b,0x9f,0x24,0xcb,0xda,0x3b,0xac,0x55,0x5f,0x13];
    let pubkey_bytes: [u8; 256] = [
        0x86,0xa9,0xef,0x08,0x1c,0x5f,0x54,0xea,0xd1,0x56,0x57,0xa2,0x82,0x13,0x33,0xbb,
        0xe2,0x28,0xad,0x21,0x2b,0xbb,0x5c,0x2d,0x35,0x4c,0x27,0x06,0x59,0x88,0x28,0x05,
        0x99,0x11,0x50,0x7f,0xfb,0x7f,0xa2,0x72,0xc7,0xd7,0xd9,0x87,0x17,0x9f,0x4f,0xc3,
        0xfd,0x18,0xdd,0x57,0x7f,0x24,0xf3,0x56,0xb5,0xa8,0xec,0x7f,0x13,0xb3,0xa0,0xb6,
        0xde,0xce,0xda,0x2f,0x1f,0xca,0x01,0x9f,0x25,0xc6,0x2d,0x18,0xd3,0xb2,0x31,0xeb,
        0xb4,0xc9,0x56,0x49,0x2a,0xd7,0x6d,0xfe,0x7c,0x8d,0x53,0x07,0x6d,0xc5,0x0f,0x11,
        0xa0,0x92,0x8d,0xd0,0x9e,0xac,0xcd,0x7f,0x2f,0xb3,0xfd,0x91,0x10,0x9c,0x79,0x40,
        0xc2,0x0b,0xb5,0x94,0x2a,0x5b,0xf2,0xf0,0x2f,0x27,0x23,0x50,0xd2,0x63,0xf5,0x85,
        0x50,0x13,0x9a,0x75,0x4f,0x2d,0x50,0xd7,0xf3,0x7f,0x39,0x33,0xfd,0x95,0xa1,0xd1,
        0x61,0x2f,0x9e,0x0b,0x86,0xdb,0xf6,0x7c,0x8b,0xed,0x9f,0x9f,0x87,0xd1,0x36,0x89,
        0xcb,0x5e,0x10,0xda,0xc9,0x60,0x73,0x06,0xce,0x8f,0xeb,0x65,0x42,0x36,0x55,0x75,
        0xc0,0xc1,0xa7,0x3c,0x8d,0x30,0x7f,0x62,0x33,0xfe,0x4c,0x32,0x6c,0x15,0x20,0xfc,
        0xb4,0x4a,0x59,0x58,0x5f,0xa9,0xca,0x56,0xd1,0xc0,0x65,0x66,0x2a,0x6d,0xb7,0x4e,
        0x22,0x98,0xec,0x52,0xd7,0x3b,0x52,0x25,0x42,0xea,0xcb,0x6e,0xf2,0x85,0x05,0xa0,
        0x2b,0x0c,0x8a,0x63,0x53,0xc9,0x22,0xbc,0x53,0x45,0x9f,0x42,0x03,0x44,0x37,0x32,
        0x51,0x56,0x35,0xa4,0xe5,0x46,0xd8,0xac,0xf3,0x24,0xfc,0x96,0xc3,0x79,0x5b,0x63];
    let final_e_bytes: [u8; 256] = [
        0x08,0xf6,0x77,0x18,0x86,0x1a,0x45,0x69,0x67,0xab,0xfd,0x4b,0x47,0xad,0x6b,0x40,
        0xa3,0x5b,0x77,0x47,0x7c,0xc4,0x0b,0xcc,0x58,0xcd,0xb1,0xcd,0x14,0x5e,0x57,0xc5,
        0x3c,0xa0,0x02,0x30,0x96,0xfd,0x18,0x80,0x43,0x63,0xcc,0x13,0x83,0x54,0xf5,0xc0,
        0x96,0x4a,0xcb,0x60,0x21,0x15,0x9f,0x95,0xec,0xa8,0x46,0x64,0x28,0xfb,0xaf,0x3b,
        0x1f,0xc2,0x47,0x85,0x75,0xd8,0x53,0x8b,0x6a,0x65,0x9d,0xb4,0x84,0x85,0xd8,0xc4,
        0xec,0x43,0x40,0xb2,0xd7,0x70,0xf7,0x8a,0x5d,0x49,0x95,0x8c,0xc7,0xc3,0xfa,0x50,
        0x87,0xda,0xb9,0xc7,0x4e,0xd2,0x20,0x6d,0x81,0x38,0x78,0x4b,0x11,0x38,0x45,0x05,
        0xe4,0x3b,0x1f,0x8f,0x36,0x6e,0xb2,0x9c,0xb6,0x67,0x52,0x2c,0x35,0x1d,0x18,0x2f,
        0x99,0x5c,0x63,0x43,0xb2,0xb5,0xb8,0xa1,0x69,0xce,0x74,0x4e,0x92,0x06,0xbb,0xd9,
        0xa6,0xae,0xb1,0x6a,0xcd,0x3b,0x9d,0x2f,0x8e,0xb2,0x6d,0xf1,0x77,0x6a,0xe1,0x39,
        0xd8,0x24,0x74,0xd9,0x07,0x45,0x7c,0xd4,0x0b,0x61,0x95,0xad,0x57,0xb3,0x28,0x14,
        0xbc,0xc8,0xed,0x52,0x4a,0x8d,0xfc,0x82,0xda,0xa3,0x8b,0x70,0x9a,0x57,0x20,0x2b,
        0xff,0x26,0xe6,0xd5,0x32,0x78,0xde,0x72,0x9b,0x5b,0xd2,0x41,0xd1,0x4e,0x15,0x17,
        0xb8,0x82,0xf8,0x7f,0xb1,0xa4,0x54,0x98,0x1d,0xb3,0x7e,0x0c,0x60,0xd6,0x36,0x6c,
        0x75,0x89,0xab,0x4c,0xe3,0x40,0xae,0x23,0x34,0xdc,0x15,0x23,0xbd,0xc9,0xc2,0x04,
        0x03,0x3e,0x73,0xfd,0x3d,0x61,0xb5,0x5a,0x14,0xf3,0x2c,0x6d,0x5f,0xc4,0x34,0x0c];
    let quotient_bytes: [u8; 256] = [
        0x05,0x0c,0xb0,0x5e,0xd1,0xa0,0xc4,0xf8,0xf3,0x80,0xf3,0xae,0x0f,0xd6,0xf9,0x27,
        0x1a,0x31,0xd7,0x34,0x99,0x9d,0xfb,0x7c,0x3d,0x60,0x62,0xee,0x30,0xad,0x3f,0x98,
        0x47,0x7f,0x92,0x2a,0x57,0xc4,0xa9,0x7d,0x1f,0x28,0x83,0x33,0xde,0x15,0x24,0x8b,
        0xdd,0x64,0x8d,0x1b,0x50,0x7d,0xf3,0xcb,0x66,0xe6,0xa4,0x35,0x8b,0x40,0x2f,0x58,
        0xc2,0xb6,0x45,0xe3,0xcb,0xc3,0x85,0x93,0xb6,0x92,0x79,0x89,0x61,0x01,0x1c,0xaa,
        0x5c,0xf9,0x52,0xd6,0x9d,0x78,0xf6,0x82,0x88,0x37,0x41,0x84,0x70,0x5d,0xbc,0x7a,
        0xb0,0x59,0xc9,0x59,0x29,0x02,0x9f,0xcd,0x1e,0xa7,0x50,0x4e,0x95,0x3c,0xeb,0x72,
        0x30,0xec,0xc9,0x41,0xf9,0x06,0xfc,0x05,0x28,0x30,0xcd,0x56,0xd5,0x31,0xbf,0xd7,
        0xce,0x68,0xca,0x15,0x8c,0x0a,0x94,0x61,0x98,0x28,0x5b,0x23,0x67,0x34,0x45,0xe5,
        0xb3,0xa8,0x7c,0x36,0xc8,0xc2,0x53,0xb0,0xec,0x8c,0x2c,0xa9,0x77,0x57,0xaa,0xf8,
        0x74,0x6e,0x96,0xa4,0x45,0x8d,0x87,0x59,0x4d,0xd0,0xc6,0xf1,0xde,0x11,0xbe,0x51,
        0x2d,0x0f,0xbe,0x09,0x67,0x11,0x63,0x75,0x31,0xca,0xd8,0x82,0x78,0xae,0xbd,0xf4,
        0x60,0xdd,0x07,0xe6,0x9a,0x89,0x07,0x7f,0xd9,0x43,0x0a,0xcb,0x44,0x0f,0x5b,0xbb,
        0x7f,0x18,0x29,0x05,0x7a,0x11,0x8c,0xa6,0x51,0x30,0xb6,0xd8,0x4a,0x17,0x0a,0x4c,
        0x03,0x78,0xd6,0xf3,0xea,0xe1,0x33,0xf9,0x88,0x41,0x89,0x60,0xf8,0x98,0xbc,0xe0,
        0x3b,0x55,0xba,0x66,0xfa,0x1a,0x6e,0x43,0x5c,0x88,0xe2,0x98,0xae,0x69,0xf7,0x69];

    // https://www.youtube.com/watch?v=cbyTXVm9NPI
    let expected: [u8; 49] = [
        0x00,0x00,0x00,0x00,0x00,0x00,0x68,0x74,0x74,0x70,0x73,0x3a,0x2f,0x2f,0x77,0x77,
        0x77,0x2e,0x79,0x6f,0x75,0x74,0x75,0x62,0x65,0x2e,0x63,0x6f,0x6d,0x2f,0x77,0x61,
        0x74,0x63,0x68,0x3f,0x76,0x3d,0x63,0x62,0x79,0x54,0x58,0x56,0x6d,0x39,0x4e,0x50,
        0x49];

    main(
        sig_bytes,
        pubkey_bytes,
        final_e_bytes,
        quotient_bytes,
        expected);
}
